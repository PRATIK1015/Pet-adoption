// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MigrationLock {
  id       String  @id @unique @default(uuid())
  isLocked Boolean
  lockedBy String
  uid      String
  gid      String
  env      String
  os       String
}

model Migration {
  id       String @id @unique @default(uuid())
  username String
  uid      String
  gid      String
  env      String
  os       String
  name     String
}

model User {
  id          String            @id @default(uuid())
  email       String            @unique
  password    String
  name        String
  role        Role              @default(USER)
  pets        Pet[]             @relation("UserPets")
  requests    AdoptionRequest[]
  Pet         Pet[]
  AccessToken AccessToken[]
  createdAt DateTime @default(now())
}

model Pet {
  id          String            @id @default(uuid())
  name        String
  species     String
  age         Int
  description String
  createdAt   DateTime          @default(now())
  createdBy   User              @relation("UserPets", fields: [createdById], references: [id])
  createdById String
  adoptedBy   User?             @relation(fields: [adoptedById], references: [id])
  adoptedById String?
  requests    AdoptionRequest[]
}

model AdoptionRequest {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
}


model AccessToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}


enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}